rabbitmq_telemetry_host_group: "telemetry_rabbitmq_all"

apply_security_hardening: false

lxc_container_ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMbl/20hYXBM5VsCU01zv4rc7coO8D5xE56j/GqTv/VJ+iEJrulU/it50SE08j80F++M2ARWN90X8q8I6J7AaIh3q4qZXK2qR3mTt8gD950Kst28x4UyM2XdkCR2T3315d250JQyR6hh8Z8Xzdqn1y/upUeWEdyUCevTl1mPi1XUKbB0qYoByn2MXWryw9hWwqqASE0ScRMKETIpQxw9VG7KbaImWMosYSJRZ2a10mNcrVWDbechO1YNYsLcdylXeD4zfkhK0Fq3VLUoGOrPDrlKW45A9u1b9G/CPgzmno5YFKrXBcCs/p6DYzhkGt+h2u4OUZtYhEY0/OJuCaQw5L lab@charles_lab"

pip_validate_certs: False

# No need for SSL
openstack_external_ssl: false
openstack_service_publicuri_proto: http

### HAProxy specific config
haproxy_ssl: false
haproxy_use_keepalived: false

# Needed to get the openvswitch kernel module loaded
openstack_host_specific_kernel_modules:
  - { name: "openvswitch", pattern: "CONFIG_OPENVSWITCH=", group: "network_hosts" }

# We use wget, so install it
utility_apt_packages:
  - git
  - wget

### Neutron specific config

neutron_plugin_type: ml2.ovs.dvr

# Need to add QOS/DSCP marks
neutron_plugin_base:
  - router
  - metering
  - qos

neutron_ml2_drivers_type: "flat,vlan"

# Typically this would be defined by the os-neutron-install
# playbook. The provider_networks library would parse the
# provider_networks list in openstack_user_config.yml and
# generate the values of network_types, network_vlan_ranges
# and network_mappings. network_mappings would have a
# different value for each host in the inventory based on
# whether or not the host was metal (typically a compute host)
# or a container (typically a neutron agent container)
neutron_provider_networks:
  network_flat_networks: "*"
  network_types: "vlan"
  network_vlan_ranges: "physnet1:102:199"
  network_mappings: "physnet1:br-provider"

# Neutron telemetry events should go to the telemetry cluster
neutron_rabbitmq_telemetry_host_group: "{{ rabbitmq_telemetry_host_group }}"
neutron_rabbitmq_telemetry_password: "{{ neutron_rabbitmq_password }}"
neutron_rabbitmq_telemetry_servers: "{% for host in groups[neutron_rabbitmq_telemetry_host_group] %}{{ hostvars[host]['ansible_ssh_host'] }}{% if not loop.last %},{% endif %}{% endfor %}"

## Glance config
glance_rabbitmq_telemetry_host_group: "{{ rabbitmq_telemetry_host_group }}"
glance_rabbitmq_telemetry_password: "{{ glance_rabbitmq_password }}"
glance_rabbitmq_telemetry_servers: "{% for host in groups[glance_rabbitmq_telemetry_host_group] %}{{ hostvars[host]['ansible_ssh_host'] }}{% if not loop.last %},{% endif %}{% endfor %}"

## Nova config
nova_rabbitmq_telemetry_host_group: "{{ rabbitmq_telemetry_host_group }}"
nova_rabbitmq_telemetry_password: "{{ nova_rabbitmq_password }}"
nova_rabbitmq_telemetry_servers: "{% for host in groups[nova_rabbitmq_telemetry_host_group] %}{{ hostvars[host]['ansible_ssh_host'] }}{% if not loop.last %},{% endif %}{% endfor %}"

## Keystone config
keystone_rabbitmq_telemetry_host_group: "{{ rabbitmq_telemetry_host_group }}"
keystone_rabbitmq_telemetry_password: "{{ keystone_rabbitmq_password }}"
keystone_rabbitmq_telemetry_servers: "{% for host in groups[keystone_rabbitmq_telemetry_host_group] %}{{ hostvars[host]['ansible_ssh_host'] }}{% if not loop.last %},{% endif %}{% endfor %}"

## Ceilometer config

# Ceilometer should use the telemetry RabbitMQ cluster exclusively
ceilometer_rabbitmq_host_group: "{{ rabbitmq_telemetry_host_group }}"
ceilometer_rabbitmq_servers: "{% for host in groups[ceilometer_rabbitmq_host_group] %}{{ hostvars[host]['ansible_ssh_host'] }}{% if not loop.last %},{% endif %}{% endfor %}"

